<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ElementNumbersDontMatch" xml:space="preserve">
    <value>Nie zgadza się liczba elementów w kolekcji. Oczekiwana:&lt;{1}&gt;. Rzeczywista:&lt;{2}&gt;.{0}</value>
  </data>
  <data name="IsMatchFail" xml:space="preserve">
    <value>Ciąg „{0}” nie jest zgodny ze wzorcem „{1}”. {2}.</value>
  </data>
  <data name="IsInstanceOfFailMsg" xml:space="preserve">
    <value>{0} Oczekiwany typ:&lt;{1}&gt;. Rzeczywisty typ:&lt;{2}&gt;.</value>
  </data>
  <data name="ContainsFail" xml:space="preserve">
    <value>Ciąg „{0}” nie zawiera ciągu „{1}”. {2}.</value>
  </data>
  <data name="StartsWithFail" xml:space="preserve">
    <value>Ciąg „{0}” nie rozpoczyna się od ciągu „{1}”. {2}.</value>
  </data>
  <data name="AreEqualDifferentTypesFailMsg" xml:space="preserve">
    <value>Oczekiwana:&lt;{1} ({2})&gt;. Rzeczywista:&lt;{3} ({4})&gt;. {0}</value>
  </data>
  <data name="DynamicDataInvalidPropertyLayout" xml:space="preserve">
    <value>Właściwość danych dynamicznych „{0}” powinna być statyczna i mieć metodę pobierającą.</value>
  </data>
  <data name="BothSameElements" xml:space="preserve">
    <value>Obie kolekcje zawierają te same elementy. {0}</value>
  </data>
  <data name="DynamicDataValueNull" xml:space="preserve">
    <value>Wartość zwracana przez właściwość lub metodę {0} nie powinna być równa null.</value>
  </data>
  <data name="AreNotEqualDeltaFailMsg" xml:space="preserve">
    <value>Oczekiwano różnicy większej niż &lt;{3}&gt; pomiędzy oczekiwaną wartością &lt;{1}&gt; a rzeczywistą wartością &lt;{2}&gt;. {0}</value>
  </data>
  <data name="ElementsAtIndexDontMatch" xml:space="preserve">
    <value>Element w indeksie {0} nie jest zgodny.</value>
  </data>
  <data name="BothCollectionsSameReference" xml:space="preserve">
    <value>Odwołania do obu kolekcji wskazują ten sam obiekt kolekcji. {0}</value>
  </data>
  <data name="AsyncUITestMethodNotSupported" xml:space="preserve">
    <value>asynchroniczna metoda TestMethod z elementem UITestMethodAttribute nie są obsługiwane. Usuń element asynchroniczny lub użyj elementu TestMethodAttribute.</value>
  </data>
  <data name="PrivateAccessorConstructorNotFound" xml:space="preserve">
    <value>
      Nie można odnaleźć konstruktora z określoną sygnaturą. Może być konieczne ponowne wygenerowanie prywatnej metody dostępu
      lub składowa może być zdefiniowana jako prywatna w klasie bazowej. W drugim przypadku należy przekazać typ,
      który definiuje składową w konstruktorze obiektu PrivateObject.
    </value>
  </data>
  <data name="AssertionFailed" xml:space="preserve">
    <value>{0} — niepowodzenie. {1}</value>
  </data>
  <data name="DoNotUseAssertEquals" xml:space="preserve">
    <value>Assert.Equals nie powinno być używane do potwierdzania. Zamiast tego użyj Assert.AreEqual i przeciążeń.</value>
  </data>
  <data name="UTF_TestMethodNoExceptionDefault" xml:space="preserve">
    <value>Metoda testowa nie zgłosiła wyjątku. Oczekiwano zgłoszenia wyjątku przez atrybut {0} zdefiniowany dla metody testowej.</value>
  </data>
  <data name="Common_NullInMessages" xml:space="preserve">
    <value>(null)</value>
  </data>
  <data name="UTF_TestMethodWrongExceptionDerivedAllowed" xml:space="preserve">
    <value>Metoda testowa zgłosiła wyjątek {0}, lecz oczekiwano wyjątku typu {1} lub jego typu pochodnego. Komunikat wyjątku: {2}</value>
  </data>
  <data name="NoExceptionThrown" xml:space="preserve">
    <value>Nie zgłoszono wyjątku. Oczekiwany wyjątek: {1}. {0}</value>
  </data>
  <data name="DataDrivenResultDisplayName" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="CollectionEqualReason" xml:space="preserve">
    <value>{0}({1})</value>
  </data>
  <data name="AccessStringInvalidSyntax" xml:space="preserve">
    <value>Ciąg dostępu ma nieprawidłową składnię.</value>
  </data>
  <data name="ElementTypesAtIndexDontMatch" xml:space="preserve">
    <value>Element o indeksie {1} jest innego typu niż oczekiwano. Oczekiwany typ:&lt;{2}&gt;. Rzeczywisty typ:&lt;{3}&gt;.{0}</value>
  </data>
  <data name="AreNotEqualFailMsg" xml:space="preserve">
    <value>Oczekiwano dowolnej wartości za wyjątkiem:&lt;{1}&gt;. Rzeczywista:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="AsyncUITestMethodWithNoDispatcherQueue" xml:space="preserve">
    <value>Element UITestMethodAttribute.DispatcherQueue nie powinien mieć wartości null. Aby użyć atrybutu UITestMethodAttribute w aplikacji klasycznej WinUI, pamiętaj o ustawieniu statycznego atrybutu UITestMethodAttribute.DispatcherQueue podczas inicjowania testu.</value>
  </data>
  <data name="UTF_TestMethodNoException" xml:space="preserve">
    <value>Metoda testowa nie zgłosiła oczekiwanego wyjątku {0}. {1}</value>
  </data>
  <data name="IsNotMatchFail" xml:space="preserve">
    <value>Ciąg „{0}” jest zgodny ze wzorcem „{1}”. {2}.</value>
  </data>
  <data name="UTF_TestMethodWrongException" xml:space="preserve">
    <value>Metoda testowa zgłosiła wyjątek {0}, lecz oczekiwano wyjątku {1}. Komunikat wyjątku: {2}</value>
  </data>
  <data name="WrongExceptionThrown" xml:space="preserve">
    <value>Zgłoszono wyjątek {2}, ale oczekiwano wyjątku {1}. {0}
Komunikat o wyjątku: {3}
Ślad stosu: {4}</value>
  </data>
  <data name="IsNotInstanceOfFailMsg" xml:space="preserve">
    <value>Zły typ:&lt;{1}&gt;. Rzeczywisty typ:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="AreEqualDeltaFailMsg" xml:space="preserve">
    <value>Oczekiwano różnicy nie większej niż &lt;{3}&gt; pomiędzy oczekiwaną wartością &lt;{1}&gt; a rzeczywistą wartością &lt;{2}&gt;. {0}</value>
  </data>
  <data name="UTF_FailedToGetExceptionMessage" xml:space="preserve">
    <value>(Nie można pobrać komunikatu dotyczącego wyjątku typu {0} z powodu wyjątku).</value>
  </data>
  <data name="AllItemsAreUniqueFailMsg" xml:space="preserve">
    <value>Znaleziono duplikat:&lt;{1}&gt;. {0}</value>
  </data>
  <data name="Common_ObjectString" xml:space="preserve">
    <value>(obiekt)</value>
  </data>
  <data name="ArgumentXMustDeriveFromClassY" xml:space="preserve">
    <value>Typu „{0}” nie można przypisać do typu „{1}”.</value>
  </data>
  <data name="EndsWithFail" xml:space="preserve">
    <value>Ciąg „{0}” nie kończy się ciągiem „{1}”. {2}.</value>
  </data>
  <data name="DynamicDataIEnumerableEmpty" xml:space="preserve">
    <value>Właściwość lub metoda {0} w elemencie {1} zwraca pusty interfejs IEnumerable&lt;object[]&gt;.</value>
  </data>
  <data name="DynamicDataInvalidMethodLayout" xml:space="preserve">
    <value>Metoda danych dynamicznych „{0}” powinna być statyczna, bez parametrów i nie generyczna.</value>
  </data>
  <data name="NumberOfElementsDiff" xml:space="preserve">
    <value>Inna liczba elementów.</value>
  </data>
  <data name="NullParameterToAssert" xml:space="preserve">
    <value>Parametr „{0}” jest nieprawidłowy. Wartość nie może być równa null. {1}.</value>
  </data>
  <data name="BothCollectionsSameElements" xml:space="preserve">
    <value>Obie kolekcje zawierają te same elementy.</value>
  </data>
  <data name="BothCollectionsEmpty" xml:space="preserve">
    <value>Obie kolekcje są puste. {0}</value>
  </data>
  <data name="AreEqualCaseFailMsg" xml:space="preserve">
    <value>Oczekiwano:&lt;{1}&gt;. Przypadek różni się od rzeczywistej wartości:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="InvalidPropertyType" xml:space="preserve">
    <value>Właściwość {0} jest typu {1}; oczekiwano typu {2}.</value>
  </data>
  <data name="AreSameGivenValues" xml:space="preserve">
    <value>Nie przekazuj typów wartości do metody AreSame(). Wartości przekonwertowane na typ Object nigdy nie będą takie same. Rozważ użycie metody AreEqual(). {0}</value>
  </data>
  <data name="DynamicDataIEnumerableNull" xml:space="preserve">
    <value>Właściwości lub metody {0} w zwracanym typie {1} nie można przypisać do elementu „IEnumerable&lt;object[]&gt;” (ani „IEnumerable&lt;ITuple&gt;” dla platformy .NET Core).</value>
  </data>
  <data name="UTF_ExpectedExceptionTypeMustDeriveFromException" xml:space="preserve">
    <value>Oczekiwanym typem wyjątku musi być typ System.Exception lub typ pochodzący od typu System.Exception.</value>
  </data>
  <data name="DynamicDataDisplayName" xml:space="preserve">
    <value>Metoda {0} musi być zgodna z oczekiwaną sygnaturą: public static {1} {0}({2}).</value>
  </data>
  <data name="AreEqualFailMsg" xml:space="preserve">
    <value>Oczekiwana:&lt;{1}&gt;. Rzeczywista:&lt;{2}&gt;. {0}</value>
  </data>
  <data name="ActualHasMismatchedElements" xml:space="preserve">
    <value>Oczekiwana kolekcja zawiera {1} wystąpień &lt;{2}&gt;. Bieżąca kolekcja zawiera {3} wystąpień. {0}</value>
  </data>
  <data name="PrivateAccessorMemberNotFound" xml:space="preserve">
    <value>
      Nie można odnaleźć określonej składowej ({0}). Może być konieczne ponowne wygenerowanie prywatnej metody dostępu
      lub składowa może być zdefiniowana jako prywatna w klasie bazowej. W drugim przypadku należy przekazać typ,
      który definiuje składową w konstruktorze obiektu PrivateObject.
    </value>
  </data>
</root>